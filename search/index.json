
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2024-03-31","image":"","imageAlt":"","link":"https://medalhas.github.io/posts/monitoring-spring-camel-apps-with-prometheus/","summary":"Introduction Why monitoring? In software engineering monitoring plays an important role in fault detection, performance improvements, the health of an application, resource planning, and based on the previous continuous improvements of the application. Having an application in a live environment it\u0026rsquo;s important to have observability to understand how our application behaves and also for a quick response.\nHow can we do it? We have several ways and tools at our disposal that we can use to monitor an application:","tags":["actuator","camel","grafana","java","monitoring","prometheus","spring","springboot"],"text":"introduction why monitoring? in software engineering monitoring plays an important role in fault detection, performance improvements, the health of an application, resource planning, and based on the previous continuous improvements of the application. having an application in a live environment it\u0026rsquo;s important to have observability to understand how our application behaves and also for a quick response.\nhow can we do it? we have several ways and tools at our disposal that we can use to monitor an application:\nlogging collect metrics from the application alerts visualization of overall health and performance of the application there are tools for all tastes and styles that cover all the topics above, in the article i\u0026rsquo;ll focus on the last 3 and we\u0026rsquo;re going to use prometheus and grafana to accomplish this.\nwhat is prometheus? prometheus is an open-source tool written in go and created by soundcloud to improve the reliability of their services, and they always return to the same topic, observability. prometheus has a built-in time series database, powered by query language (promql), alerts and alert manager, and a pull-based metric collection mechanism.\nif you are interested in the story of prometheus, you can check prometheus: the documentary.\nwhat is grafana? grafana is an open-source analytics and visualization platform designed for monitoring and observability. users may query, visualize metrics, and create dashboards and alerts. connects to various data sources, but it\u0026rsquo;s a perfect marriage for prometheus.\nwhat is camel? camel is an open-source integration java framework that enables you to easily integrate various systems consuming or producing data. but i\u0026rsquo;m not going deep into camel, as i believe if you are reading this you already know apache camel. in this article, i\u0026rsquo;m having the camel running inside a spring boot application to take advantage of all the benefits of developing with spring boot.\nhands-on spring boot actuator is a set of features provided to monitor and manage applications. it includes built-in endpoints and features that allow to monitor and interact with the applications at runtime. it collects and exposes various metrics about the application\u0026rsquo;s performance and behavior, such as memory usage, cpu usage, garbage collection statistics, http request metrics, etc.\nmetrics endpoint to use spring boot actuator you need to add to your pom.xml:\n\u0026lt;dependency\u0026gt; \u0026lt;groupid\u0026gt;org.springframework.boot\u0026lt;/groupid\u0026gt; \u0026lt;artifactid\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactid\u0026gt; \u0026lt;/dependency\u0026gt; or on your build.graddle\ndependencies { implementation \u0026#39;org.springframework.boot:spring-boot-starter-actuator\u0026#39; } to have the http endpoints active you also need to add on your pom.xml:\n\u0026lt;dependency\u0026gt; \u0026lt;groupid\u0026gt;org.springframework.boot\u0026lt;/groupid\u0026gt; \u0026lt;artifactid\u0026gt;spring-boot-starter-web\u0026lt;/artifactid\u0026gt; \u0026lt;/dependency\u0026gt; or on your build.graddle\ndependencies { implementation \u0026#39;org.springframework.boot:spring-boot-starter-web\u0026#39; } by default, the spring actuator will have the following endpoints active under the /actuator\n{ \u0026#34;_links\u0026#34;: { \u0026#34;self\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;http://localhost:8080/actuator\u0026#34;, \u0026#34;templated\u0026#34;: false }, \u0026#34;health\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;http://localhost:8080/actuator/health\u0026#34;, \u0026#34;templated\u0026#34;: false }, \u0026#34;health-path\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;http://localhost:8080/actuator/health/{*path}\u0026#34;, \u0026#34;templated\u0026#34;: true } } } if you want to expose other endpoints you need to declare them on your application.properties, e.g.:\nmanagement.endpoints.web.exposure.include=health,metrics { \u0026#34;_links\u0026#34;: { \u0026#34;self\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;http://localhost:8080/actuator\u0026#34;, \u0026#34;templated\u0026#34;: false }, \u0026#34;health\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;http://localhost:8080/actuator/health\u0026#34;, \u0026#34;templated\u0026#34;: false }, \u0026#34;health-path\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;http://localhost:8080/actuator/health/{*path}\u0026#34;, \u0026#34;templated\u0026#34;: true }, \u0026#34;metrics-requiredmetricname\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;http://localhost:8080/actuator/metrics/{requiredmetricname}\u0026#34;, \u0026#34;templated\u0026#34;: true }, \u0026#34;metrics\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;http://localhost:8080/actuator/metrics\u0026#34;, \u0026#34;templated\u0026#34;: false } } } you can check more about it on spring boot actuator documentation.\nin the /actuator/metrics you can see all the metrics available and you can check the metrics on the endpoint /actuator/metrics/{requiredmetricname}, e.g.: for /actuator/metrics/jvm.classes.loaded we\u0026rsquo;ll have a response similar to this:\n{ \u0026#34;name\u0026#34;: \u0026#34;jvm.classes.loaded\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;the number of classes that are currently loaded in the java virtual machine\u0026#34;, \u0026#34;baseunit\u0026#34;: \u0026#34;classes\u0026#34;, \u0026#34;measurements\u0026#34;: [ { \u0026#34;statistic\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;value\u0026#34;: 9611 } ], \u0026#34;availabletags\u0026#34;: [] } you can also custom name on the path, instead of /actuator, i prefer the /monitoring.\nmanagement.endpoints.web.base-path=/monitoring but prometheus doesn\u0026rsquo;t use this format to collect metrics, so we need to add the icrometer-registry-prometheus dependency to have an endpoint compatible with prometheus .\n\u0026lt;dependency\u0026gt; \u0026lt;groupid\u0026gt;io.micrometer\u0026lt;/groupid\u0026gt; \u0026lt;artifactid\u0026gt;micrometer-registry-prometheus\u0026lt;/artifactid\u0026gt; \u0026lt;/dependency\u0026gt; and also add on your application.properties\nmanagement.endpoints.web.exposure.include=health,metrics,prometheus so calling on our browser the http://localhost:8080/monitoring/prometheus we\u0026rsquo;ll get:\n# help http_server_requests_active_seconds_max # type http_server_requests_active_seconds_max gauge http_server_requests_active_seconds_max{exception=\u0026#34;none\u0026#34;,method=\u0026#34;get\u0026#34;,outcome=\u0026#34;success\u0026#34;,status=\u0026#34;200\u0026#34;,uri=\u0026#34;unknown\u0026#34;,} 0.027983583 # help http_server_requests_active_seconds # type http_server_requests_active_seconds summary http_server_requests_active_seconds_active_count{exception=\u0026#34;none\u0026#34;,method=\u0026#34;get\u0026#34;,outcome=\u0026#34;success\u0026#34;,status=\u0026#34;200\u0026#34;,uri=\u0026#34;unknown\u0026#34;,} 1.0 http_server_requests_active_seconds_duration_sum{exception=\u0026#34;none\u0026#34;,method=\u0026#34;get\u0026#34;,outcome=\u0026#34;success\u0026#34;,status=\u0026#34;200\u0026#34;,uri=\u0026#34;unknown\u0026#34;,} 0.02796725 ... right now our application is ready to integrate with prometheus, so let\u0026rsquo;s do it.\nprometheus configuration so let\u0026rsquo;s create the prometheus configuration file, the prometheus.yml.\nglobal: scrape_interval: 15s scrape_configs: - job_name: \u0026#39;prometheus\u0026#39; static_configs: - targets: [\u0026#39;127.0.0.1:9090\u0026#39;] - job_name: \u0026#39;my-app\u0026#39; metrics_path: \u0026#39;/monitoring/prometheus\u0026#39; static_configs: - targets: [\u0026#39;my-app:8080\u0026#39;] we have defined the interval that prometheus will collect metrics, in the example above it\u0026rsquo;s in every 15 seconds. then we have defined 2 jobs:\nfor prometheus itself; for our application, note that we\u0026rsquo;ve defined the endpoint to collect the metrics (/monitoring/prometheus). note that we\u0026rsquo;ve defined the metrics_path for the my-app and not for prometheus, because prometheus uses the default endpoint /metrics. version: \u0026#39;3.8\u0026#39; networks: metrics: name: metrics services: my-app: build: context: . dockerfile: dockerfile container_name: my-app ports: - \u0026#34;8080:8080\u0026#34; networks: - metrics volumes: - ./files:/usr/app/files prometheus: image: prom/prometheus ports: - \u0026#34;9090:9090\u0026#34; volumes: - ./prometheus/config:/etc/prometheus - ./prometheus/database:/prometheus command: - --config.file=/etc/prometheus/prometheus.yml - --storage.tsdb.path=/prometheus networks: - metrics camel metrics to collect camel metrics we\u0026rsquo;ll need to tweak the camelcontext, so we\u0026rsquo;ll provide:\na route policy factory that creates micrometer route policies for monitoring camel routes and a message history factory that creates micrometer message history for monitoring message flows in camel routes. as an example: @configuration public class camelconfiguration { @bean public camelcontextconfiguration camelcontextconfiguration() { return new camelcontextconfiguration() { @override public void beforeapplicationstart(camelcontext camelcontext) { camelcontext.addroutepolicyfactory(new micrometerroutepolicyfactory()); camelcontext.setmessagehistoryfactory(new micrometermessagehistoryfactory()); } @override public void afterapplicationstart(camelcontext camelcontext) { } }; } } here are some of the metrics available by default:\n{ \u0026#34;names\u0026#34;: [ \u0026#34;camel.exchanges.external.redeliveries\u0026#34;, \u0026#34;camel.exchanges.failed\u0026#34;, \u0026#34;camel.exchanges.failures.handled\u0026#34;, \u0026#34;camel.exchanges.succeeded\u0026#34;, \u0026#34;camel.exchanges.total\u0026#34;, \u0026#34;camel.routes.added\u0026#34;, \u0026#34;camel.routes.reloaded\u0026#34;, \u0026#34;camel.routes.running\u0026#34;, ... ] } metrics prometheus has 4 types of metrics:\ncounter gauge histogram summary to understand more about these types of metrics please refer to prometheus documentation. create custom metrics you create your metrics, directly on the camel route or by code.\nfrom(\u0026#34;file://somecrazydirectory\u0026#34;) .process(processor) .to(\u0026#34;micrometer:counter:app.crazy.metric?increment=1\u0026#34;) .to(\u0026#34;mock:result\u0026#34;); @autowired private meterregistry meterregistry; ... var counter = counter.builder(\u0026#34;app.crazy.metric\u0026#34;) .description(\u0026#34;my crazy metric\u0026#34;) .register(meterregistry); counter.increment(); ... ","title":"Monitoring a Camel application with Prometheus"},{"date":"2023-03-31","image":"","imageAlt":"","link":"https://medalhas.github.io/posts/the-gentle-art-of-giving-feedback/","summary":"What is feedback and why is important? Feedback, by definition, is information given to someone about their performance or behavior to help them to improve and thrive in the future.\nPositive feedback vs Negative feedback Commonly we use the terms positive feedback or negative feedback, I don\u0026rsquo;t love those terms, good feedback can\u0026rsquo;t be negative.\nI prefer to split them by the objective, so we have:\nGrowth feedback Praise feedback Growth feedback They have different objectives, the first one is to help the subject to improve and grow in their career, it\u0026rsquo;s fundamental for a manager to give growth feedback.","tags":["feedback","leadership"],"text":"what is feedback and why is important? feedback, by definition, is information given to someone about their performance or behavior to help them to improve and thrive in the future.\npositive feedback vs negative feedback commonly we use the terms positive feedback or negative feedback, i don\u0026rsquo;t love those terms, good feedback can\u0026rsquo;t be negative.\ni prefer to split them by the objective, so we have:\ngrowth feedback praise feedback growth feedback they have different objectives, the first one is to help the subject to improve and grow in their career, it\u0026rsquo;s fundamental for a manager to give growth feedback. one common mistake is to confuse feedback with a reprimand, this is important to maintain the focus on the objective of the feedback, as it has the goal for the other party to listen, understand and take actions to improve the performance or the behavior, so the communication must be clear, with the right tone and the right message.\ntone of voice your tone of voice expresses your emotions or feelings and encompasses not only the words you choose but also the way deliver them. the way you speak a message is as important as the message itself. it means that you can convey different meanings or emotions based on the tone of your voice, even if you use the same words. therefore, when delivering a message, paying attention to both the words and the tone you use is essential to ensure that your message is received as intended.\neven if the message itself is well-crafted, if it is delivered in an aggressive tone, the receiver will most likely react defensively, and the intended meaning may be lost. the amygdala, the part of the brain responsible for processing emotions, will be the first to respond to a message delivered in an aggressive tone. however, to ensure that the intended message is understood, it is crucial to communicate with the prefrontal cortex, the part of the brain responsible for rational thinking.\nin conclusion, the way you deliver a message is just as crucial as the message itself, and it is important to keep in mind that the tone in which you deliver the message can either facilitate or hinder effective communication. by being mindful of your tone of voice, you can improve your ability to give feedback effectively to others.\nhow to build your message? the situation-behavior-impact (sbi) framework is a simple and effective way to give feedback. it consists of three parts:\nsituation: explain the context where the behavior occurred, this helps to set the stage for the feedback and helps the receiver to understand the specific situation where the behavior was observed. behavior: explain the observed behavior, be objective and limited to facts, and keep out opinions or judgments. impact: this is the effect or consequence of the behavior, explain how the behavior impacted others or the situation. using this framework will help you to deliver very specific, objective, and constructive feedback that helps the receiver understand the impact of their behavior and how to improve it.\npraise feedback forgotten by some managers and overused by others, praise feedback has the goal to:\nmotivate build confidence encourage the good behavior with that being said those three factors will increase the productivity of an individual or the team, they\u0026rsquo;ll feel that their work/behavior was appreciated and awareness that they are on the right path and will be more confident to take more risks and encourage them to repeat the good behavior.\ni\u0026rsquo;ve started this section by saying that some managers overused it, and this can be dangerous and counterproductive in the long term. when praise feedback is given too often or without meaningful substance, it can lead to a culture of complacency, where individuals expect to be praised for the most basic tasks. and in the long term can lead to a decrease in motivation and effort, as individuals may feel that their efforts are already being recognized and appreciated, and therefore they may not see the need to strive for better performance.\nwhen giving praise feedback we can use the same situation-behavior-impact (sbi) framework described previously. don\u0026rsquo;t just say \u0026ldquo;good job\u0026rdquo;, be specific about the situation and behavior and explain the positive impact.\n","title":"The gentle art of giving feedback!"},{"date":"2020-03-15","image":"","imageAlt":"","link":"https://medalhas.github.io/posts/thoughts-about-remote-work/","summary":"Summary The Covid-19 vírus force us to make some changes in our lives, one of them it’s to stay safe at home and favor the remote work.\nThis is a subject that caught my attention recently as I work daily with people spread across remote locations and us as a team had to adapt.\nWorking remotely has many advantages, like the time we save in commuting, optimize the focus time as we can fewer interruptions, more environment-friendly, people can be better distributed across the countries and not so concentrated in big urban areas and other many more that I just can’t remember.","tags":["remote","remotework"],"text":"summary the covid-19 vírus force us to make some changes in our lives, one of them it’s to stay safe at home and favor the remote work.\nthis is a subject that caught my attention recently as i work daily with people spread across remote locations and us as a team had to adapt.\nworking remotely has many advantages, like the time we save in commuting, optimize the focus time as we can fewer interruptions, more environment-friendly, people can be better distributed across the countries and not so concentrated in big urban areas and other many more that i just can’t remember.\ni must advise you that i am not a fan of remote work as i miss the contact with the team, but i see it as inevitable in the future.\nbut it also has many challenges, the lack of social interaction with teammates could lead to a less sense of belonging and affect the teamwork, the home has too many distractions and it demands great discipline, communication also can be challenging as it sometimes it’s just easier to talk or draw a picture.\nsome actions can help you face these challenges:\nhave a dedicated and appropriate space to work; create a routine as you’re going to the office, set a wake-up hour, take a bath and dress up, so that you have a work mindset; set hours to start and stop working; try to go to the cafe or take lunch with a friend, socialize with others. make sure you have access to all the tools you need to perform your work (vpn or cloud) choose the proper tools for communicating and collaborate with your teammates (bluejeans, slack, zoom, miro). it’s important to have your home office well defined, it should be a quiet space without distractions. this is important for you to achieve the focus and take advantage of working at home and be free of office distractions.\ncommunication with your teammates should be clear so be aware to use proper tools, like a headset with a microphone, be sure to mute your mic when your teammates are talking. it’s important to have your camera on to be more engaged with the team.\nthe set a schedule it’s also an essential issue as it force you to have a discipline to time to start but also, and not less important, to have time to stop as we don’t want to burnout.\nstay at home with kids at this time the challenges are even bigger because we should avoid contact with other people and because schools are closed i have to stay at home with the kids.\nin my case, an 11-year-old girl and 5-year-old boy, so at this point taking care of kids and work, looks like two incompatible ideas. i’m in a mix of kind of worried and kind of curious and challenged how it’s going to work.\nso i’ve started to i’ve explained to them that although i’m at home i’m working and we worked together in an agreement when they can interrupt me. i have the luck that my kids are very mature for their age but they’re kids anyway.\ni will see how it goes…\nsome tools that can help you slack bluejeans zoom miro funretro ","title":"Thoughts About Remote Work"},{"date":"0001-01-01","image":"","imageAlt":"","link":"https://medalhas.github.io/about/","summary":"My name is Luís Medalhas and Engineer Lead on Farfetch and a career since 1998. This site is a tool to express some thoughts about several subjects that I care. To write is a way to structure my thougths and investigate, some of them reflect personal experience.","tags":[],"text":"my name is luís medalhas and engineer lead on farfetch and a career since 1998. this site is a tool to express some thoughts about several subjects that i care. to write is a way to structure my thougths and investigate, some of them reflect personal experience.\n","title":"About me"}]
}

